#include "idl_types.h"

[
  uuid("00000000-0000-0000-0000-000000000000"),
  pointer_default(ref)
]

interface rcg {
	#define BOOL uint32
	#define PLONG int32 *
	#define UCHAR uint8
	#define PBYTE uint8 *
	#define KERBERR int32
	#define KEY_AGREEMENT_HANDLE int64

	typedef struct {
		uint32 Pdu;
		uint32 Length;
		[size_is(Length)] uint8 *Asn1Buffer;
	} KERB_ASN1_DATA;

	typedef struct {
		uint32 Pdu;
		uint32 Length;
		[size_is(Length)] uint8 *checksum;
	} KERB_ASN1_DATA_CHECKSUM;

	typedef struct {
		uint32 length;
		[size_is(length)] uint8 *value;
	} KERB_RPC_OCTET_STRING;

	typedef struct {
		int32 preauth_data_type;
		KERB_RPC_OCTET_STRING preauth_data;
	} KERB_RPC_PA_DATA;

	typedef struct {
		uint32 reserved1;
		uint32 reserved2;
		KERB_RPC_OCTET_STRING reserved3;
	} KERB_RPC_ENCRYPTION_KEY;

	typedef struct {
		uint16 Length;
		uint16 MaximumLength;
		[size_is(MaximumLength/2), length_is(Length/2)]
		[string,charset(UTF16)] uint16* Buffer;
	} RPC_UNICODE_STRING;

	typedef struct {
		int16 NameType;
		uint16 NameCount;
		[size_is(NameCount)] RPC_UNICODE_STRING* Names;
	} KERB_RPC_INTERNAL_NAME;


	//[v1_enum]
	typedef [enum16bit] enum
	{
		//RemoteCallMinimum = 0,
		// start generic calls - not tied to a specific SSP
		//RemoteCallGenericMinimum = 0,
		//RemoteCallGenericReserved = 0,
		//RemoteCallGenericMaximum = 0xff,
		// Start Kerberos remote calls
		//RemoteCallKerbMinimum = 0x100,
		RemoteCallKerbNegotiateVersion = 0x100,
		RemoteCallKerbBuildAsReqAuthenticator = 0x101,
		RemoteCallKerbVerifyServiceTicket = 0x102,
		RemoteCallKerbCreateApReqAuthenticator = 0x103,
		RemoteCallKerbDecryptApReply = 0x104,
		RemoteCallKerbUnpackKdcReplyBody = 0x105,
		RemoteCallKerbComputeTgsChecksum = 0x106,
		RemoteCallKerbBuildEncryptedAuthData = 0x107,
		RemoteCallKerbPackApReply = 0x108,
		RemoteCallKerbHashS4UPreauth = 0x109,
		RemoteCallKerbSignS4UPreauthData = 0x10a,
		RemoteCallKerbVerifyChecksum = 0x10b,
		#if 0
		Reserved1, // 0x10c,
		Reserved2, // 0x10d,
		Reserved3, // 0x10e,
		Reserved4, // 0x10f,
		Reserved5, // 0x110,
		Reserved6, // 0x111,
		Reserved7, // 0x112,
		#endif
		RemoteCallKerbDecryptPacCredentials = 0x113,
		RemoteCallKerbCreateECDHKeyAgreement = 0x114,
		RemoteCallKerbCreateDHKeyAgreement = 0x115,
		RemoteCallKerbDestroyKeyAgreement  = 0x116,
		RemoteCallKerbKeyAgreementGenerateNonce = 0x117,
		RemoteCallKerbFinalizeKeyAgreement = 0x118,
		//RemoteCallKerbMaximum = 0x1ff,
		// End Kerberos remote calls

		// Start NTLM remote calls
		//RemoteCallNtlmMinimum = 0x200,
		RemoteCallNtlmNegotiateVersion = 0x200,
		RemoteCallNtlmLm20GetNtlm3ChallengeResponse = 0x201,
		RemoteCallNtlmCalculateNtResponse = 0x202,
		RemoteCallNtlmCalculateUserSessionKeyNt = 0x203,
		RemoteCallNtlmCompareCredentials = 0x204 //,
		//RemoteCallNtlmMaximum = 0x2ff,
		// End NTLM remote calls
		//RemoteCallMaximum = 0x2ff,
		//RemoteCallInvalid = 0xffff // This enumeration MUST fit in 16 bits
	} RemoteGuardCallId;


	typedef struct _SECPKG_SUPPLEMENTAL_CRED {
		RPC_UNICODE_STRING PackageName;
		uint32 CredentialSize;
		[size_is(CredentialSize)] uint8 *Credentials;
	} SECPKG_SUPPLEMENTAL_CRED;

	typedef struct {
		uint32 CredentialCount;
		[size_is(CredentialCount)] SECPKG_SUPPLEMENTAL_CRED Credentials[*];
	} SECPKG_SUPPLEMENTAL_CRED_ARRAY;
	typedef struct SECPKG_SUPPLEMENTAL_CRED_ARRAY *PSECPKG_SUPPLEMENTAL_CRED_ARRAY;


	typedef struct {
		uint32 cbData;
		[size_is(cbData)] PBYTE pbData;
	} KERB_RPC_CRYPTO_API_BLOB;


	// Used to negotiate the protocol version that will be used.
	// Server sends the maximum version it supports; client replies
	// with the version that will actually be used.
	typedef struct {
		uint32 MaxSupportedVersion;
	} NegotiateVersion;

	typedef struct {
		int64 QuadPart;
	} LARGE_INTEGER;
	typedef struct LARGE_INTEGER *PLARGE_INTEGER;

	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* EncryptionKey;
		[ptr] KERB_RPC_ENCRYPTION_KEY* ArmorKey; // optional
		LARGE_INTEGER *TimeSkew;
	} BuildAsReqAuthenticatorReq;

	typedef struct {
		int32 PreauthDataType;
		KERB_RPC_OCTET_STRING PreauthData;
	} BuildAsReqAuthenticatorResp;

	typedef struct {
		KERB_ASN1_DATA* PackedTicket;
		KERB_RPC_ENCRYPTION_KEY* ServiceKey;
		[ptr] LARGE_INTEGER *TimeSkew; // optional
	} VerifyServiceTicketReq;

	typedef struct {
		KERB_ASN1_DATA DecryptedTicket;
		int32 KerbProtocolError;
	} VerifyServiceTicketResp;

	typedef struct RPC_UNICODE_STRING *PRPC_UNICODE_STRING;
	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* EncryptionKey;
		uint32 SequenceNumber;
		KERB_RPC_INTERNAL_NAME* ClientName;
		RPC_UNICODE_STRING* ClientRealm;
		LARGE_INTEGER *SkewTime;
		[ptr] KERB_RPC_ENCRYPTION_KEY* SubKey; // optional
		[ptr] KERB_ASN1_DATA* AuthData; // optional
		[ptr] KERB_ASN1_DATA_CHECKSUM* GssChecksum; // optional
		uint32 KeyUsage;
	} CreateApReqAuthenticatorReq;

	typedef struct {
		LARGE_INTEGER AuthenticatorTime;
		KERB_ASN1_DATA Authenticator;
		int32 KerbProtocolError;
	} CreateApReqAuthenticatorResp;

	typedef struct {
		KERB_ASN1_DATA* EncryptedReply;
		KERB_RPC_ENCRYPTION_KEY* Key;
	} DecryptApReplyReq;

	typedef struct {
		KERB_ASN1_DATA ApReply;
	} DecryptApReplyResp;

	typedef struct {
		KERB_ASN1_DATA* EncryptedData;
		KERB_RPC_ENCRYPTION_KEY* Key;
		[ptr] KERB_RPC_ENCRYPTION_KEY* StrengthenKey; // seems optional
		uint32 Pdu;
		uint32 KeyUsage;
	} UnpackKdcReplyBodyReq;

	typedef struct {
		int32 KerbProtocolError;
		KERB_ASN1_DATA ReplyBody;
	} UnpackKdcReplyBodyResp;

	typedef struct {
		KERB_ASN1_DATA* RequestBody;
		KERB_RPC_ENCRYPTION_KEY* Key;
		uint32 ChecksumType;
	} ComputeTgsChecksumReq;

	typedef struct {
		KERB_ASN1_DATA_CHECKSUM Checksum;
	} ComputeTgsChecksumResp;

	typedef struct {
		uint32 KeyUsage;
		KERB_RPC_ENCRYPTION_KEY* Key;
		KERB_ASN1_DATA* PlainAuthData;
	} BuildEncryptedAuthDataReq;

	typedef struct {
		KERB_ASN1_DATA EncryptedAuthData;
	} BuildEncryptedAuthDataResp;

	typedef struct {
		KERB_ASN1_DATA* Reply;
		KERB_ASN1_DATA* ReplyBody;
		KERB_RPC_ENCRYPTION_KEY* SessionKey;
	} PackApReplyReq;

	typedef struct {
		uint32 PackedReplySize;
		[size_is(PackedReplySize)] uint8 *PackedReply;
	} PackApReplyResp;

	typedef struct {
		KERB_ASN1_DATA* S4UPreauth;
		KERB_RPC_ENCRYPTION_KEY* Key;
		int32 ChecksumType;
	} HashS4UPreauthReq;

	typedef struct {
		uint32 *ChecksumSize;
		[size_is(, *ChecksumSize)] uint8 ** ChecksumValue;
	} HashS4UPreauthResp;

	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* Key;
		BOOL IsRequest;
		KERB_ASN1_DATA* UserId;
		PLONG ChecksumType;
	} SignS4UPreauthDataReq;

	typedef struct {
		int32 *ChecksumType;
		uint32 *ChecksumSize;
		[size_is(, *ChecksumSize)] uint8 ** ChecksumValue;
	} SignS4UPreauthDataResp;

	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* Key;
		uint32 ChecksumType;
		uint32 ExpectedChecksumSize;
		[size_is(ExpectedChecksumSize)] UCHAR* ExpectedChecksum;
		uint32 DataToCheckSize;
		[size_is(DataToCheckSize)] UCHAR* DataToCheck;
	} VerifyChecksumReq;

	typedef struct {
		BOOL IsValid;
	} VerifyChecksumResp;

	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* Key;
		uint32 Version;
		uint32 EncryptionType;
		uint32 DataSize;
		[size_is(DataSize)] UCHAR* Data;
	} DecryptPacCredentialsReq;

	typedef struct {
		PSECPKG_SUPPLEMENTAL_CRED_ARRAY Credentials;
	} DecryptPacCredentialsResp;

	typedef struct {
		uint32 KeyBitLen;
	} CreateECDHKeyAgreementReq;

	typedef struct {
		KEY_AGREEMENT_HANDLE* KeyAgreementHandle;
		KERBERR* KerbErr;
		uint32 *EncodedPubKeyLen;
		[size_is(, *EncodedPubKeyLen)] uint8 ** EncodedPubKey;
	} CreateECDHKeyAgreementResp;

	typedef struct {
		// This [case(RemoteCallKerb)] struct has no input parameters, but for
		// simplicity and consistency with the other parameters, let's define
		// this as a [case(RemoteCallKerb)] struct with a single ignored value.
		UCHAR Ignored;
	} CreateDHKeyAgreementReq;

	typedef struct {
		KERB_RPC_CRYPTO_API_BLOB* ModulusP;
		KERB_RPC_CRYPTO_API_BLOB* GeneratorG;
		KERB_RPC_CRYPTO_API_BLOB* FactorQ;
		KEY_AGREEMENT_HANDLE* KeyAgreementHandle;
		KERBERR* KerbErr;
		uint32 *LittleEndianPublicKeyLen;
		[size_is(, *LittleEndianPublicKeyLen)] uint8 ** LittleEndianPublicKey;
	} CreateDHKeyAgreementResp;

	typedef struct {
		KEY_AGREEMENT_HANDLE KeyAgreementHandle;
	} DestroyKeyAgreementReq;

	typedef struct {
		// This [case(RemoteCallKerb)] struct has no output, but for
		// simplicity and consistency define as a
		// [case(RemoteCallKerb)] struct with a single ignored value.
		UCHAR Ignored;
	} DestroyKeyAgreementResp;

	typedef struct {
		KEY_AGREEMENT_HANDLE KeyAgreementHandle;
	} KeyAgreementGenerateNonceReq;

	typedef struct {
		uint32 *NonceLen;
		[size_is(, *NonceLen)] uint8 ** Nonce;
	} KeyAgreementGenerateNonceResp;

	typedef struct {
		KEY_AGREEMENT_HANDLE* KeyAgreementHandle;
		uint32 *KerbEType;
		uint32 RemoteNonceLen;
		[size_is(RemoteNonceLen)] uint8 *RemoteNonce;
		uint32 X509PublicKeyLen;
		[size_is(X509PublicKeyLen)] uint8 *X509PublicKey;
	} FinalizeKeyAgreementReq;

	typedef struct {
		KERB_RPC_ENCRYPTION_KEY* SharedKey;
	} FinalizeKeyAgreementResp;

	typedef [flag(LIBNDR_FLAG_ALIGN4),switch_type(uint16)] union {
		[case(RemoteCallKerbNegotiateVersion)] NegotiateVersion negociateVersion;
		[case(RemoteCallKerbBuildAsReqAuthenticator)] BuildAsReqAuthenticatorReq buildAsReqAuthenticator;
		[case(RemoteCallKerbVerifyServiceTicket)] VerifyServiceTicketReq verifyServiceTicket;
		[case(RemoteCallKerbCreateApReqAuthenticator)] CreateApReqAuthenticatorReq createApReqAuthenticator;
		[case(RemoteCallKerbDecryptApReply)] DecryptApReplyReq decryptApReply;
		[case(RemoteCallKerbUnpackKdcReplyBody)] UnpackKdcReplyBodyReq unpackKdcReplyBody;
		[case(RemoteCallKerbComputeTgsChecksum)] ComputeTgsChecksumReq computeTgsChecksum;
		[case(RemoteCallKerbBuildEncryptedAuthData)] BuildEncryptedAuthDataReq buildEncryptedAuthData;
		[case(RemoteCallKerbPackApReply)] PackApReplyReq packApReply;
		[case(RemoteCallKerbHashS4UPreauth)] HashS4UPreauthReq hashS4UPreauth;
		[case(RemoteCallKerbSignS4UPreauthData)] SignS4UPreauthDataReq signS4UPreauthData;
		[case(RemoteCallKerbVerifyChecksum)] VerifyChecksumReq verifyChecksum;
		[case(RemoteCallKerbDecryptPacCredentials)] DecryptPacCredentialsReq decryptPacCredentials;
		[case(RemoteCallKerbCreateECDHKeyAgreement)] CreateECDHKeyAgreementReq createECDHKeyAgreement;
		[case(RemoteCallKerbCreateDHKeyAgreement)] CreateDHKeyAgreementReq createDHKeyAgreement;
		[case(RemoteCallKerbDestroyKeyAgreement)] DestroyKeyAgreementReq destroyKeyAgreement;
		[case(RemoteCallKerbKeyAgreementGenerateNonce)] KeyAgreementGenerateNonceReq keyAgreementGenerateNonce;
		[case(RemoteCallKerbFinalizeKeyAgreement)] FinalizeKeyAgreementReq finalizeKeyAgreement;
	} KerbInputUnion;


	[public]
	typedef struct {
		// CallId determines the call being sent over the wire.
		RemoteGuardCallId CallId;
		// Input paramters are held in a union so that each call can be sent
		// over the wire in the same type of KerbCredIsoRemoteInput structure.
		[switch_type(uint16), switch_is(CallId)] KerbInputUnion callUnion;
	} KerbCredIsoRemoteInput;

	typedef [flag(LIBNDR_FLAG_ALIGN4), switch_type(uint16)]union {
		[case(RemoteCallKerbNegotiateVersion)] NegotiateVersion negociateVersion;
		[case(RemoteCallKerbBuildAsReqAuthenticator)] BuildAsReqAuthenticatorResp buildAsReqAuthenticator;
		[case(RemoteCallKerbVerifyServiceTicket)] VerifyServiceTicketResp verifyServiceTicket;
		[case(RemoteCallKerbCreateApReqAuthenticator)] CreateApReqAuthenticatorResp createApReqAuthenticator;
		[case(RemoteCallKerbDecryptApReply)] DecryptApReplyResp decryptApReply;
		[case(RemoteCallKerbUnpackKdcReplyBody)] UnpackKdcReplyBodyResp unpackKdcReplyBody;
		[case(RemoteCallKerbComputeTgsChecksum)] ComputeTgsChecksumResp computeTgsChecksum;
		[case(RemoteCallKerbBuildEncryptedAuthData)] BuildEncryptedAuthDataResp buildEncryptedAuthData;
		[case(RemoteCallKerbPackApReply)] PackApReplyResp packApReply;
		[case(RemoteCallKerbHashS4UPreauth)] HashS4UPreauthResp hashS4UPreauth;
		[case(RemoteCallKerbSignS4UPreauthData)] SignS4UPreauthDataResp signS4UPreauthData;
		[case(RemoteCallKerbVerifyChecksum)] VerifyChecksumResp verifyChecksum;
		[case(RemoteCallKerbDecryptPacCredentials)] DecryptPacCredentialsResp decryptPacCredentials;
		[case(RemoteCallKerbCreateECDHKeyAgreement)] CreateECDHKeyAgreementResp createECDHKeyAgreement;
		[case(RemoteCallKerbCreateDHKeyAgreement)] CreateDHKeyAgreementResp createDHKeyAgreement;
		[case(RemoteCallKerbDestroyKeyAgreement)] DestroyKeyAgreementResp destroyKeyAgreement;
		[case(RemoteCallKerbKeyAgreementGenerateNonce)] KeyAgreementGenerateNonceResp keyAgreementGenerateNonce;
		[case(RemoteCallKerbFinalizeKeyAgreement)] FinalizeKeyAgreementResp finalizeKeyAgreement;
	} KerbOutputUnion;

	[public]
	typedef struct {
		// CallId determines the call being sent over the wire.
		RemoteGuardCallId CallId;
		NTSTATUS Status;

		// Input paramters are held in a union so that each call can be sent
		// over the wire in the same type of KerbCredIsoRemoteInput structure.
		[switch_type(RemoteGuardCallId), switch_is(CallId)] KerbOutputUnion callUnion;
	} KerbCredIsoRemoteOutput;

// ==================================== NTLM =============================================
	typedef struct {
	     // UCHAR Data[MSV1_0_RESPONSE_LENGTH];
	 } NT_RESPONSE;

	typedef struct _NT_CHALLENGE{
		//UCHAR Data[MSV1_0_CHALLENGE_LENGTH];
	} NT_CHALLENGE;
	typedef struct NT_CHALLENGE *PNT_CHALLENGE;

	typedef NT_CHALLENGE LM_SESSION_KEY;

	typedef struct {
		//UCHAR Response[MSV1_0_NTLM3_RESPONSE_LENGTH];
		//UCHAR ChallengeFromClient[MSV1_0_CHALLENGE_LENGTH];
	} MSV1_0_LM3_RESPONSE;
	typedef struct MSV1_0_LM3_RESPONSE *PMSV1_0_LM3_RESPONSE;

	typedef struct {
		//UCHAR Data[MSV1_0_USER_SESSION_KEY_LENGTH];
	} USER_SESSION_KEY;
	typedef struct PUSER_SESSION_KEY *PUSER_SESSION_KEY;

	typedef struct {
		//UCHAR Data[MSV1_0_CREDENTIAL_KEY_LENGTH];
	} MSV1_0_CREDENTIAL_KEY;
	typedef struct MSV1_0_CREDENTIAL_KEY* PMSV1_0_CREDENTIAL_KEY;

	typedef struct _MSV1_0_REMOTE_ENCRYPTED_SECRETS	{
		BOOL reserved1;
		BOOL reserved2;
		BOOL reserved3;
		MSV1_0_CREDENTIAL_KEY reserved4;
		MSV1_0_CREDENTIAL_KEY reserved5;
		uint32 reservedSize;
		[size_is(reservedSize)] UCHAR* reserved6;
	} MSV1_0_REMOTE_ENCRYPTED_SECRETS;
	typedef struct MSV1_0_REMOTE_ENCRYPTED_SECRETS *PMSV1_0_REMOTE_ENCRYPTED_SECRETS;

	// Use the provided credential and challenge to generate the
	// NT and LM response for the NTLM v2 authentication protocol.
	typedef struct {
		PMSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
		PRPC_UNICODE_STRING UserName;
		PRPC_UNICODE_STRING LogonDomainName;
		PRPC_UNICODE_STRING ServerName;
		//UCHAR ChallengeToClient[MSV1_0_CHALLENGE_LENGTH];
	} Lm20GetNtlm3ChallengeResponseReq;

	typedef struct {
		uint16 Ntlm3ResponseLength;
		[size_is(Ntlm3ResponseLength)] uint8 *Ntlm3Response;
		MSV1_0_LM3_RESPONSE Lm3Response;
		USER_SESSION_KEY UserSessionKey;
		LM_SESSION_KEY LmSessionKey;
	} Lm20GetNtlm3ChallengeResponseResp;

	typedef struct {
		PNT_CHALLENGE NtChallenge;
		PMSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
	} CalculateNtResponseReq;

	typedef struct {
		NT_RESPONSE NtResponse;
	} CalculateNtResponseResp;

	// Use the provided credential and response to calculate
	// a session key according to the NTLM v1 protocol.
	typedef struct {
		NT_RESPONSE *NtResponse;
		PMSV1_0_REMOTE_ENCRYPTED_SECRETS Credential;
	} CalculateUserSessionKeyNtReq;

	typedef struct {
		USER_SESSION_KEY UserSessionKey;
	} CalculateUserSessionKeyNtResp;

	// Compare the provided credentials to determine whether
	// they're identical.
	typedef struct	{
		PMSV1_0_REMOTE_ENCRYPTED_SECRETS LhsCredential;
		PMSV1_0_REMOTE_ENCRYPTED_SECRETS RhsCredential;
	} CompareCredentialsReq;

	typedef struct {
		BOOL AreNtOwfsEqual;
		BOOL AreLmOwfsEqual;
		BOOL AreShaOwfsEqual;
	} CompareCredentialsResp;

	typedef [flag(LIBNDR_FLAG_ALIGN4), switch_type(uint16)] union {
		[case(RemoteCallNtlmNegotiateVersion)] NegotiateVersion negotiateVersion;
		[case(RemoteCallNtlmLm20GetNtlm3ChallengeResponse)] Lm20GetNtlm3ChallengeResponseReq lm20GetNtlm3ChallengeResponse;
		[case(RemoteCallNtlmCalculateNtResponse)] CalculateNtResponseReq calculateNtResponse;
		[case(RemoteCallNtlmCalculateUserSessionKeyNt)] CalculateUserSessionKeyNtReq calculateUserSessionKeyNt;
		[case(RemoteCallNtlmCompareCredentials)] CompareCredentialsReq compareCredentials;
	} NtlmCredInput;

	[public]
	typedef struct {
		RemoteGuardCallId CallId;
		[switch_type(RemoteGuardCallId), switch_is(CallId)] NtlmCredInput callUnion;
	} NtlmCredIsoRemoteInput;


	typedef [flag(LIBNDR_FLAG_ALIGN4), switch_type(uint16)] union {
		[case(RemoteCallNtlmNegotiateVersion)] NegotiateVersion negotiateVersion;
		[case(RemoteCallNtlmLm20GetNtlm3ChallengeResponse)] Lm20GetNtlm3ChallengeResponseResp lm20GetNtlm3ChallengeResponse;
		[case(RemoteCallNtlmCalculateNtResponse)] CalculateNtResponseResp calculateNtResponse;
		[case(RemoteCallNtlmCalculateUserSessionKeyNt)] CalculateUserSessionKeyNtResp calculateUserSessionKeyNt;
		[case(RemoteCallNtlmCompareCredentials)] CompareCredentialsResp compareCredentials;
	} NtlmCredOutput;

	[public]
	typedef struct {
		RemoteGuardCallId CallId;
		NTSTATUS Status;
		[switch_type(RemoteGuardCallId), switch_is(CallId)] NtlmCredOutput callUnion;
	} NtlmCredIsoRemoteOutput;


}

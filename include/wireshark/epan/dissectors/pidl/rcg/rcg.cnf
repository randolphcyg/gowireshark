HF_FIELD hf_KERB_RPC_ENCRYPTION_KEY_reserved1 "Reserved1" "rcg.KERB_RPC_ENCRYPTION_KEY.reserved1" FT_UINT32 BASE_HEX NULL 0 "" "" ""
HF_RENAME hf_rcg_KERB_RPC_ENCRYPTION_KEY_reserved1 hf_KERB_RPC_ENCRYPTION_KEY_reserved1

HF_FIELD hf_KERB_RPC_ENCRYPTION_KEY_reserved2 "Encoding type" "rcg.KERB_RPC_ENCRYPTION_KEY.EncodingType" FT_UINT32 BASE_HEX NULL 0 "" "" ""
HF_RENAME hf_rcg_KERB_RPC_ENCRYPTION_KEY_reserved2 hf_KERB_RPC_ENCRYPTION_KEY_reserved2


NOEMIT rcg_dissect_element_KERB_ASN1_DATA_CHECKSUM_checksum__
MANUAL rcg_dissect_element_KERB_ASN1_DATA_CHECKSUM_checksum__
MANUAL rcg_dissect_element_KERB_ASN1_DATA_CHECKSUM_checksum_

MANUAL rcg_dissect_struct_KerbCredIsoRemoteOutput
MANUAL rcg_dissect_struct_KerbCredIsoRemoteInput
MANUAL rcg_dissect_struct_NtlmCredIsoRemoteOutput
MANUAL rcg_dissect_struct_NtlmCredIsoRemoteInput


CODE START

 #include <epan/asn1.h>
 #include "packet-kerberos.h"

static int
rcg_dissect_element_KERB_ASN1_DATA_CHECKSUM_checksum_(tvbuff_t *tvb, int offset, packet_info *pinfo, proto_tree *tree, dcerpc_info* di _U_ , guint8 *drep _U_)
{
        if (di->conformant_run)
            return offset;

	asn1_ctx_t asn1_ctx;

	ALIGN_TO_4_BYTES;

	asn1_ctx_init(&asn1_ctx, ASN1_ENC_BER, TRUE, pinfo);
	asn1_ctx.private_data = /*&rcg*/NULL;

	offset = dissect_krb5_Checksum(tree, tvb, offset + 4, &asn1_ctx);

	return offset;
}

int
rcg_dissect_struct_KerbCredIsoRemoteOutput(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	guint16 CallId = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int old_offset;

	ALIGN_TO_4_BYTES;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_rcg_KerbCredIsoRemoteOutput);
	}

	offset = rcg_dissect_element_KerbCredIsoRemoteOutput_CallId(tvb, offset, pinfo, tree, di, drep, &CallId);
	col_set_str(pinfo->cinfo, COL_INFO, val_to_str(pinfo->pool, CallId, rcg_RemoteGuardCallId_vals, "unknown operation (%u)"));

	offset = rcg_dissect_element_KerbCredIsoRemoteOutput_Status(tvb, offset, pinfo, tree, di, drep);
	offset = rcg_dissect_element_KerbCredIsoRemoteOutput_callUnion(tvb, offset, pinfo, tree, di, drep, &CallId);
	offset = dissect_deferred_pointers(pinfo, tvb, offset, di, drep);

	proto_item_set_len(item, offset-old_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_4_BYTES;
	}

	return offset;
}

int
rcg_dissect_struct_KerbCredIsoRemoteInput(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, guint8 *drep _U_, int hf_index _U_, guint32 param _U_)
{
	guint16 CallId = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int old_offset;

	ALIGN_TO_4_BYTES;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_rcg_KerbCredIsoRemoteInput);
	}

	offset = rcg_dissect_element_KerbCredIsoRemoteInput_CallId(tvb, offset, pinfo, tree, di, drep, &CallId);
	col_set_str(pinfo->cinfo, COL_INFO, val_to_str(pinfo->pool, CallId, rcg_RemoteGuardCallId_vals, "unknown operation (%u)"));

	offset = rcg_dissect_element_KerbCredIsoRemoteInput_callUnion(tvb, offset, pinfo, tree, di, drep, &CallId);
	offset = dissect_deferred_pointers(pinfo, tvb, offset, di, drep);
	proto_item_set_len(item, offset-old_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_4_BYTES;
	}

	return offset;
}

int
rcg_dissect_struct_NtlmCredIsoRemoteOutput(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, uint8_t *drep _U_, int hf_index _U_, uint32_t param _U_)
{
	uint16_t CallId = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int old_offset;

	if (di->conformant_run) return offset;

	ALIGN_TO_4_BYTES;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_rcg_NtlmCredIsoRemoteOutput);
	}

	offset = rcg_dissect_element_NtlmCredIsoRemoteOutput_CallId(tvb, offset, pinfo, tree, di, drep, &CallId);
	col_set_str(pinfo->cinfo, COL_INFO, val_to_str(pinfo->pool, CallId, rcg_RemoteGuardCallId_vals, "unknown operation (%u)"));

	offset = rcg_dissect_element_NtlmCredIsoRemoteOutput_Status(tvb, offset, pinfo, tree, di, drep);
	offset = rcg_dissect_element_NtlmCredIsoRemoteOutput_callUnion(tvb, offset, pinfo, tree, di, drep, &CallId);
	offset = dissect_deferred_pointers(pinfo, tvb, offset, di, drep);

	proto_item_set_len(item, offset-old_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_4_BYTES;
	}

	return offset;
}

int
rcg_dissect_struct_NtlmCredIsoRemoteInput(tvbuff_t *tvb _U_, int offset _U_, packet_info *pinfo _U_, proto_tree *parent_tree _U_, dcerpc_info* di _U_, uint8_t *drep _U_, int hf_index _U_, uint32_t param _U_)
{
	uint16_t CallId = 0;
	proto_item *item = NULL;
	proto_tree *tree = NULL;
	int old_offset;

	if (di->conformant_run) return offset;

	ALIGN_TO_4_BYTES;

	old_offset = offset;

	if (parent_tree) {
		item = proto_tree_add_item(parent_tree, hf_index, tvb, offset, -1, ENC_NA);
		tree = proto_item_add_subtree(item, ett_rcg_NtlmCredIsoRemoteInput);
	}

	offset = rcg_dissect_element_NtlmCredIsoRemoteInput_CallId(tvb, offset, pinfo, tree, di, drep, &CallId);
	col_set_str(pinfo->cinfo, COL_INFO, val_to_str(pinfo->pool, CallId, rcg_RemoteGuardCallId_vals, "unknown operation (%u)"));

	offset = rcg_dissect_element_NtlmCredIsoRemoteInput_callUnion(tvb, offset, pinfo, tree, di, drep, &CallId);
	offset = dissect_deferred_pointers(pinfo, tvb, offset, di, drep);

	proto_item_set_len(item, offset-old_offset);

	if (di->call_data->flags & DCERPC_IS_NDR64) {
		ALIGN_TO_4_BYTES;
	}

	return offset;
}



CODE END
